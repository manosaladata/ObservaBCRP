library(shinydashboard)
library(shiny)
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
library(BCRPR)
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('C:/Users/Jhon/Desktop/contrataciones-estado-emergencia-master/App-1')
importbcrp('PN01205PM','2005-8','2020-9')
library(shiny); runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('C:/Users/Jhon/Desktop/contrataciones-estado-emergencia-master/App-1')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('C:/Users/Jhon/Desktop/contrataciones-estado-emergencia-master/App-1')
library(readxl)
library(tidyverse)
redondeo <- function(x, k) as.numeric(trimws(format(round(x, k), nsmall=2)))
#1.
###########################################################
#########################DATA##############################
setwd("D:/Git Hub-BEST/contrataciones-estado-emergencia/Data")
runApp('C:/Users/Jhon/Desktop/contrataciones-estado-emergencia-master/App-1')
source('~/.active-rstudio-document', echo=TRUE)
library(shiny)
library(shinydashboard)
library(plotly)
library(ggplot2)
data(movies, package = "ggplot2")
minx <- min(movies$rating)
maxx <- max(movies$rating)
#######
####### UI
#######
ui <- dashboardPage(
############# Header
dashboardHeader(title = "Test"),
############# Sidebar
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"))
)
),
############# Dashboard body
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1"), width=6, height=500),
box(plotOutput("plot2"), width=6, height=500)
)
)
)
#######
####### Server
#######
server <- function(input, output, session) {
output$plot1 <- renderPlot({
# a simple histogram of movie ratings
p <- plot_ly(movies, x = rating, autobinx = F, type = "histogram",
xbins = list(start = minx, end = maxx, size = 2))
# style the xaxis
layout(p, xaxis = list(title = "Ratings", range = c(minx, maxx), autorange = F,
autotick = F, tick0 = minx, dtick = 2))
})
output$plot2 <- renderPlot({
hist(movies$rating, col="blue")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(plotly)
library(ggplot2)
data(movies, package = "ggplot2")
minx <- min(movies$rating)
maxx <- max(movies$rating)
#######
####### UI
#######
ui <- dashboardPage(
############# Header
dashboardHeader(title = "Test"),
############# Sidebar
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"))
)
),
############# Dashboard body
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1"), width=6, height=500),
box(plotOutput("plot2"), width=6, height=500)
)
)
)
#######
####### Server
#######
server <- function(input, output, session) {
output$plot1 <- renderPlot({
# a simple histogram of movie ratings
p <- plot_ly(movies, x = rating, autobinx = F, type = "histogram",
xbins = list(start = minx, end = maxx, size = 2))
# style the xaxis
layout(p, xaxis = list(title = "Ratings", range = c(minx, maxx), autorange = F,
autotick = F, tick0 = minx, dtick = 2))
})
output$plot2 <- renderPlot({
hist(movies$rating, col="blue")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(plotly)
library(ggplot2)
data(movies, package = "ggplot2")
minx <- min(movies$rating)
maxx <- max(movies$rating)
#######
####### UI
#######
ui <- dashboardPage(
############# Header
dashboardHeader(title = "Test"),
############# Sidebar
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"))
)
),
############# Dashboard body
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1"), width=6, height=500),
box(plotOutput("plot2"), width=6, height=500)
)
)
)
#######
####### Server
#######
server <- function(input, output, session) {
output$plot1 <- renderPlot({
# a simple histogram of movie ratings
p <- plot_ly(movies, x = rating, autobinx = F, type = "histogram",
xbins = list(start = minx, end = maxx, size = 2))
# style the xaxis
layout(p, xaxis = list(title = "Ratings", range = c(minx, maxx), autorange = F,
autotick = F, tick0 = minx, dtick = 2))
})
output$plot2 <- renderPlot({
hist(movies$rating, col="blue")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(plotly)
library(ggplot2)
data(movies, package = "ggplot2")
minx <- min(movies$rating)
maxx <- max(movies$rating)
#######
####### UI
#######
ui <- dashboardPage(
############# Header
dashboardHeader(title = "Test"),
############# Sidebar
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"))
)
),
############# Dashboard body
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1"), width=6, height=500),
box(plotOutput("plot2"), width=6, height=500)
)
)
)
#######
####### Server
#######
server <- function(input, output, session) {
output$plot1 <- renderPlot({
# a simple histogram of movie ratings
p <- plot_ly(movies, x = rating, autobinx = F, type = "histogram",
xbins = list(start = minx, end = maxx, size = 2))
# style the xaxis
layout(p, xaxis = list(title = "Ratings", range = c(minx, maxx), autorange = F,
autotick = F, tick0 = minx, dtick = 2))
})
output$plot2 <- renderPlot({
hist(movies$rating, col="blue")
})
}
shinyApp(ui, server)
output$plot1 <- renderPlotly({
hist(movies$rating, col="blue")
})
server <- function(input, output, session) {
output$plot1 <- renderPlot({
# a simple histogram of movie ratings
p <- plot_ly(movies, x = rating, autobinx = F, type = "histogram",
xbins = list(start = minx, end = maxx, size = 2))
# style the xaxis
layout(p, xaxis = list(title = "Ratings", range = c(minx, maxx), autorange = F,
autotick = F, tick0 = minx, dtick = 2))
})
output$plot1 <- renderPlotly({
hist(movies$rating, col="blue")
})
}
shinyApp(ui, server)
shinyApp(ui,server)
source('~/.active-rstudio-document', echo=TRUE)
library(shiny); runApp('app3.R')
library(xts)
inflacion<-importbcrp('PN01205PM','2011','2021')
inflacionsub<-importbcrp('PN01278PM','2011','2021')
clearPushBack()
clc
runApp('app3.R')
runApp('app3.R')
runApp('C:/Users/Jhon/Desktop/contrataciones-estado-emergencia-master/App-1')
runApp('app3.R')
runApp('C:/Users/Jhon/Desktop/contrataciones-estado-emergencia-master/App-1')
runApp('C:/Users/Jhon/Desktop/contrataciones-estado-emergencia-master/App-1')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
library(shiny); runApp('app3.R')
runApp('app3.R')
library(shiny); runApp('app4.R')
runApp('app4.R')
runApp('C:/Users/Jhon/Desktop/contrataciones-estado-emergencia-master/App-1')
dolar<-importbcrp('PD09873MA','1980','2020')
dolar<-dolar[,2]
dolar<-as.numeric(dolar)
fechas <- seq(as.Date("1980-01-01"),as.Date("2020-12-01"),"year")
merge(dolar, fechas, join = "inner")
dolar<-as.data.frame(dolar)
grafico2<-dolar
grafico2<-xts(grafico2,order.by = fechas)
dygraph(grafico2)
dolar<-importbcrp('PD09873MA','1980','2020')
dolar<-dolar[,2]
dolar
dolar<-importbcrp('PD09873MA','1980','2020')
dolar
dolar<-dolar[,2]
dolar<-as.numeric(dolar)
fechas <- seq(as.Date("1980-01-01"),as.Date("2020-12-01"),"year")
merge(dolar, fechas, join = "inner")
dolar<-as.data.frame(dolar)
dolar
dolar[,41]
dolar[41,]
runApp('C:/Users/Jhon/Desktop/contrataciones-estado-emergencia-master/App-1')
runApp('C:/Users/Jhon/Desktop/contrataciones-estado-emergencia-master/App-1')
runApp('app4.R')
runApp('app4.R')
runApp('C:/Users/Jhon/Desktop/contrataciones-estado-emergencia-master/App-1')
runApp('app4.R')
runApp('app4.R')
acdo
dolar
runApp('app4.R')
runApp('app4.R')
runApp('app4.R')
runApp('app4.R')
shinyApp(ui = ui, server = server)
runApp('app4.R')
# }
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('app4.R')
source('~/.active-rstudio-document', echo=TRUE)
runApp('app4.R')
runApp('app4.R')
runApp('app4.R')
runApp('app4.R')
runApp('app4.R')
runApp('app4.R')
runApp('app4.R')
runApp('app4.R')
runApp('app4.R')
runApp('app4.R')
runApp('app4.R')
runApp('app4.R')
runApp('app4.R')
library(shiny); runApp('app4.R')
